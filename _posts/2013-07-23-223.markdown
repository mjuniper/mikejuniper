---
layout: post
title: Node.js and launchd
date: '2013-07-23 15:08:57'
---

I use <a href="https://www.jungledisk.com/">Jungledisk</a> to do daily backups for my wife's business. Jungledisk helpfully notifies me if the job succeeded or failed. But a while ago, something happened and the jobs just stopped happening altogether. They weren't failing, they were just never starting so I wasn't getting notified. This was really bad because I didn't notice for a couple of weeks. I realized I needed a way to be notified when something <em>didn't</em> happen which is a more difficult problem than being notified when something <em>did</em> happen.

In trying to figure out how to solve this problem, I noticed that Jungledisk can publish an RSS feed of my backup history. So I realized I could just write a script to go out and get that RSS feed, parse it, and check if my backup job completed successfully in the last 24 hours and notify me if it has not.

My first thought was to write the script in Python but then I would have had two problems because I don't know Python all that well. Then I realized that I could write it in Javascript and use <a href="http://nodejs.org/">node.js</a>! For notification, I'm using a cool service called <a href="https://pushover.net/">Pushover</a> which pushes notifications to my android phone. 

So I whipped up a node script (see below) and scheduled it with Windows Task Scheduler and we're rocking!

<pre>
'use strict';

var http = require('http'),
	xml2js = require('xml2js'),
	dateUtils = require('date-utils'),
	pushover = require('node-pushover');

var jobs = [ 'this is an array of the names of the jobs in which you are interested' ];

main();


function main() {
	var options = {
	  host: 'backupreporting.jungledisk.com',
	  port: 80,
	  path: '/feeds/backupreporting.ashx?format=rss20&guid=yourguidhere',
	  method: 'GET'
	};

	var req = http.request(options, function(res) {
	  //console.log('STATUS: ' + res.statusCode);
	  res.setEncoding('utf8');

	  var fullResponse = '';

	  res.on('data', function (chunk) {
	  	fullResponse = fullResponse + chunk;  	
	  });

	  res.on('end', function () {  	
	    var parser = new xml2js.Parser();
	    parser.parseString(fullResponse, parseRssCallback);
	  });
	});


	req.on('error', function(e) {
	  console.log('problem with request: ' + e.message);
	});

	req.end();
}

function parseRssCallback (err, result) {
	try {
		//console.dir(result.rss.channel[0]);
		var now = new Date();	
		var title, pubDate;

		//filter to ones that are COMPLETE and have a pubDate in the last 24 hours
		var filtered = result.rss.channel[0].item.filter(function(item) {
			pubDate = new Date(item.pubDate[0]);
			title = item.title[0];		

			return title.indexOf('COMPLETE') > -1
				&& pubDate.getHoursBetween(now) < 24
				&& jobInJobsList(title);
		});

		if (!listContainsEachJob(filtered)) {
			sendNotification('Backup Alert', 'Some backup jobs did not complete!');
		}
	} 
	catch (e) {
		sendNotification('Backup Alert', 'An error ocurred checking backup status!');
	}
}

function listContainsEachJob (list) {
	//make sure the list has at least one entry for each job we care about
	var titles = list.map(function(item) {
		return item.title[0];
	});

	var result = true;
	jobs.forEach(function(job) {
		result = result && titles.some(function (title) {
			return title.indexOf(job) > -1;
		});
	});

	return result;
}

function jobInJobsList (title) {	
	//check if the title is in the jobslist
	return jobs.some(function(job) {
		return title.indexOf(job) > -1
	});
}

function sendNotification (title, message) {
	pushover.send({  
	    token: 'your token here',
	    user: 'your user here',
	    title: title,
	    message: message
	}, function(err, response){
	    if (err){
	        //console.error("Error sending pushover");
	        //console.error(err);
	    }else{
	        //console.log("Sending pushover complete");
	        //console.log(response);
	    }
	});	
}
</pre>

But then I got a MacBook Air, which is awesome; but no more Windows Task Scheduler. It seems that the way to schedule this sort of thing on a Mac is using launchd. To schedule a task with launchd, you create a .plist file which is an XML file specifying the parameters of your job. This is <a href="http://nathangrigg.net/2012/07/schedule-jobs-using-launchd/">documented</a> <a href="http://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html">elsewhere</a> but notice that to run a node script, you can just specify an array of 2 arguments for ProgramArguments. The first is node, the second is the script you want to run. The .plist is below:
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.mikejuniper.backupcheck&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/local/bin/node&lt;/string&gt;
        &lt;string&gt;/Users/mjuniper/projects/scripts/backupcheck.js&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;StartCalendarInterval&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;6&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;integer&gt;0&lt;/integer&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</pre>

I'm very new to node and Macs so I'd be very interested in any thoughts anybody's got on this.